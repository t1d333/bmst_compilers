{"message":"unused import: `std::iter::Iterator`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/token.rs","byte_start":5,"byte_end":24,"line_start":2,"line_end":2,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"use std::iter::Iterator;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/token.rs","byte_start":1,"byte_end":25,"line_start":2,"line_end":2,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"use std::iter::Iterator;","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::iter::Iterator`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/token.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::iter::Iterator;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `crate::tokenizer::Tokenizer`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/token.rs","byte_start":31,"byte_end":58,"line_start":4,"line_end":4,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"use crate::tokenizer::Tokenizer;","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/token.rs","byte_start":27,"byte_end":59,"line_start":4,"line_end":4,"column_start":1,"column_end":33,"is_primary":true,"text":[{"text":"use crate::tokenizer::Tokenizer;","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::tokenizer::Tokenizer`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/token.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::tokenizer::Tokenizer;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"method `next` can be confused for the standard trait method `std::iter::Iterator::next`","code":{"code":"clippy::should_implement_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/tokenizer.rs","byte_start":928,"byte_end":3269,"line_start":41,"line_end":110,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn next(&mut self) -> Result<token::Token, SyntaxErr> {","highlight_start":5,"highlight_end":64},{"text":"        self.skip_whitespaces();","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let coeff_captures = self","highlight_start":1,"highlight_end":34},{"text":"            .coeff_regex","highlight_start":1,"highlight_end":25},{"text":"            .captures_from_pos(&self.raw_text[self.pos.0], self.pos.1)","highlight_start":1,"highlight_end":71},{"text":"            .unwrap();","highlight_start":1,"highlight_end":23},{"text":"        let substance_captures = self","highlight_start":1,"highlight_end":38},{"text":"            .substance_regex","highlight_start":1,"highlight_end":29},{"text":"            .captures_from_pos(&self.raw_text[self.pos.0], self.pos.1)","highlight_start":1,"highlight_end":71},{"text":"            .unwrap();","highlight_start":1,"highlight_end":23},{"text":"        let op_captures = self","highlight_start":1,"highlight_end":31},{"text":"            .op_regex","highlight_start":1,"highlight_end":22},{"text":"            .captures_from_pos(&self.raw_text[self.pos.0], self.pos.1)","highlight_start":1,"highlight_end":71},{"text":"            .unwrap();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut coeff_pos = (usize::MAX, usize::MAX);","highlight_start":1,"highlight_end":54},{"text":"        let mut coeff_value = \"\";","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut op_pos = (usize::MAX, usize::MAX);","highlight_start":1,"highlight_end":51},{"text":"        let mut op_value = \"\";","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut substance_pos = (usize::MAX, usize::MAX);","highlight_start":1,"highlight_end":58},{"text":"        let mut substance_value = \"\";","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Some(captures) = coeff_captures {","highlight_start":1,"highlight_end":49},{"text":"            coeff_pos.0 = captures.get(1).unwrap().start();","highlight_start":1,"highlight_end":60},{"text":"            coeff_pos.1 = captures.get(1).unwrap().end();","highlight_start":1,"highlight_end":58},{"text":"            coeff_value = captures.get(1).unwrap().as_str();","highlight_start":1,"highlight_end":61},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Some(captures) = substance_captures {","highlight_start":1,"highlight_end":53},{"text":"            substance_pos.0 = captures.get(1).unwrap().start();","highlight_start":1,"highlight_end":64},{"text":"            substance_pos.1 = captures.get(1).unwrap().end();","highlight_start":1,"highlight_end":62},{"text":"            substance_value = captures.get(1).unwrap().as_str();","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Some(captures) = op_captures {","highlight_start":1,"highlight_end":46},{"text":"            op_pos.0 = captures.get(1).unwrap().start();","highlight_start":1,"highlight_end":57},{"text":"            op_pos.1 = captures.get(1).unwrap().end();","highlight_start":1,"highlight_end":55},{"text":"            op_value = captures.get(1).unwrap().as_str();","highlight_start":1,"highlight_end":58},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let start = coeff_pos.0.min(op_pos.0).min(substance_pos.0);","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if start != self.pos.1 {","highlight_start":1,"highlight_end":33},{"text":"            let line = self.pos.0;","highlight_start":1,"highlight_end":35},{"text":"            let col = self.pos.1;","highlight_start":1,"highlight_end":34},{"text":"            self.skip_err();","highlight_start":1,"highlight_end":29},{"text":"            return Err(SyntaxErr { pos: (line, col) });","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut kind = token::TokenKind::Coefficient;","highlight_start":1,"highlight_end":54},{"text":"        let mut value = coeff_value;","highlight_start":1,"highlight_end":37},{"text":"        let mut end = coeff_pos.1;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if start == op_pos.0 {","highlight_start":1,"highlight_end":31},{"text":"            kind = token::TokenKind::Operator;","highlight_start":1,"highlight_end":47},{"text":"            end = op_pos.1;","highlight_start":1,"highlight_end":28},{"text":"            value = op_value;","highlight_start":1,"highlight_end":30},{"text":"        } else if start == substance_pos.0 {","highlight_start":1,"highlight_end":45},{"text":"            kind = token::TokenKind::Substance;","highlight_start":1,"highlight_end":48},{"text":"            end = substance_pos.1;","highlight_start":1,"highlight_end":35},{"text":"            value = substance_value;","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.pos.1 = end;","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(Token::new(value, kind, (self.pos.0, start)))","highlight_start":1,"highlight_end":57},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::should_implement_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tokenizer.rs:41:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn next(&mut self) -> Result<token::Token, SyntaxErr> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.skip_whitespaces();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let coeff_captures = self\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(Token::new(value, kind, (self.pos.0, start)))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::should_implement_trait)]` on by default\u001b[0m\n\n"}
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
